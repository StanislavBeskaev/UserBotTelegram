import random
from time import sleep

import daemon
from pyrogram import Client, filters
from pyrogram.errors import FloodWait

from app.settings import get_settings, Settings

app = Client("my_account")


# TODO –Ω–∞–ø–∏—Å–∞—Ç—å readme
# TODO —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥, —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –ø–æ —á–∞—Å—Ç—è–º
# TODO type hints
# TODO docker
# TODO –¥–æ–±–∞–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏—è
@app.on_message(filters.command("type", prefixes=".") & filters.me)
def typing(_, msg):
    orig_text = msg.text.split(".type ", maxsplit=1)[1]
    text = orig_text
    tbp = ""  # to be printed
    typing_symbol = "‚ñí"

    while tbp != orig_text:
        try:
            msg.edit(tbp + typing_symbol)
            sleep(0.02)  # 50 ms

            tbp = tbp + text[0]
            text = text[1:]

            msg.edit(tbp)
            sleep(0.05)

        except FloodWait:
            sleep(0.05)


# –ö–æ–º–∞–Ω–¥–∞ –≤–∑–ª–æ–º–∞ –ø–µ–Ω—Ç–∞–≥–æ–Ω–∞
@app.on_message(filters.command("hack", prefixes=".") & filters.me)
def hack(_, msg):
    perc = 0

    while perc < 100:
        try:
            text = "üëÆ‚Äç –í–∑–ª–æ–º –ø–µ–Ω—Ç–∞–≥–æ–Ω–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ ..." + str(perc) + "%"
            msg.edit(text)

            perc += random.randint(1, 3)
            sleep(0.1)

        except FloodWait as e:
            sleep(e.x)

    msg.edit("üü¢ –ü–µ–Ω—Ç–∞–≥–æ–Ω —É—Å–ø–µ—à–Ω–æ –≤–∑–ª–æ–º–∞–Ω!")
    sleep(3)

    msg.edit("üëΩ –ü–æ–∏—Å–∫ —Å–µ–∫—Ä–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ–± –ù–õ–û ...")
    perc = 0

    while perc < 100:
        try:
            text = "üëΩ –ü–æ–∏—Å–∫ —Å–µ–∫—Ä–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ–± –ù–õ–û ..." + str(perc) + "%"
            msg.edit(text)

            perc += random.randint(1, 5)
            sleep(0.15)

        except FloodWait as e:
            sleep(e.x)

    msg.edit("ü¶ñ –ù–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–∏ –¥–∏–Ω–æ–∑–∞–≤—Ä–æ–≤ –Ω–∞ –∑–µ–º–ª–µ!")


def main():
    # TODO –≤–æ–∑–º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ punq
    settings = get_settings()
    _check_settings(settings=settings)

    _write_pyrogram_config(api_id=settings.TG_API_ID, api_hash=settings.TG_API_HASH)
    app.run()


def _check_settings(settings: Settings) -> None:

    if not settings.TG_API_ID:
        print("–£–∫–∞–∂–∏—Ç–µ api_id –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è TG_API_ID")
        exit(1)
    if not settings.TG_API_HASH:
        print("–£–∫–∞–∂–∏—Ç–µ api_hash –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è TG_API_HASH")
        exit(1)


def _write_pyrogram_config(api_id: str, api_hash: str):
    with open('config.ini', mode='w', encoding='UTF-8') as config:
        config_content = f"[pyrogram]\napi_id = {api_id}\napi_hash = {api_hash}"
        config.write(config_content)


if __name__ == "__main__":
    with daemon.DaemonContext():
        main()
